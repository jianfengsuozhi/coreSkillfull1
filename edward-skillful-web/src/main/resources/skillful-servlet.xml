<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
       >


    <!-- 安全配置:必须放在加载Controller的xml,否则@PreAuthorize没有效果-->
    <security:global-method-security pre-post-annotations="enabled" />
    <!-- 自动扫描 本包和子包-->
    <context:component-scan base-package="com.web.action,com.web.test"/>

  	<!--规定模板文件的类型和位置-->
<!--    <bean id="velocityConfigurer"
        class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
    <property name="resourceLoaderPath" value="WEB-INF/views/"/>
    <property name="velocityProperties">
      <map>
        <entry key="input.encoding" value="UTF-8"/>
        <entry key="output.encoding" value="UTF-8"/>
      </map>
    </property>
  </bean>
  
	&lt;!&ndash;view resolver
    对转向页面的路径解析。prefix：前缀， suffix：后缀 &ndash;&gt;
  <bean id="viewResolver"
        class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
    <property name="suffix" value=".vm"/>
    <property name="prefix" value="screen/"/>
    <property name="toolboxConfigLocation" value="WEB-INF/vm-toolbox.xml"/>
    <property name="contentType" value="text/html;charset=UTF-8"/>
    <property name="layoutUrl" value="layout/default.vm"/>
  </bean>-->

    <!--视图路径解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="999" />
    </bean>


    <!--json -->
    <!--支持String ， Accept所有类型-->
    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!--支持Map List 实体对象等等  ，Accept所有类型-->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=utf-8</value>
                <value>text/html;charset=utf-8</value>
                <value>text/json;charset=utf-8</value>
                <value>application/json;charset=utf-8</value>
            </list>
        </property>
        <property name="objectMapper">
            <bean class="com.utils.CustomObjectMapper"></bean>
        </property>
    </bean>
    <!-- HandlerMapping -->
    <!--请求对应的ur和方法l情况-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>

    <bean id="conditionUrl" class="com.web.util.ConditionUrl">
        <property name="urlConditionMap">
            <map>
                <entry key="/baseMaterial/" value="1"></entry>
            </map>
        </property>
    </bean>

    <!-- HandlerAdapter -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringHttpMessageConverter" />
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
        <property name="customArgumentResolvers">
            <list>
                <bean class="com.web.util.SearchParamHandlerMethodArgumentResolver">
                    <property name="conditionUrl" ref="conditionUrl"/>
                </bean>
                <!--<bean class="com.exception.SearchHandlerMethodArgumentResolver"/>&lt;!&ndash;参数处理器&ndash;&gt;-->
            </list>
        </property>
    </bean>

    <!--服务端就既可以接收multipart/form-data 传输的数据，也可以接收application/x-www-form-urlencoded传输的文本数据-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>

    <!--异常处理 有异常时页面显示问题：第一种解决方法-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash; 定义默认的异常处理页面，当该异常类型的注册时使用 &ndash;&gt;
        &lt;!&ndash;先看满足exceptionMappings,若不满足则是defaultErrorView即error页面&ndash;&gt;
        <property name="defaultErrorView" value="test/exception/error"/>&lt;!&ndash;控制台抛出异常 页面显示/edward-skillful-web/WEB-INF/views/error.jsp&ndash;&gt;
        &lt;!&ndash; 定义异常处理页面用来获取异常信息的变量名，默认名为exception &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
        &lt;!&ndash; 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 &ndash;&gt;
        <property name="exceptionMappings">
            <props>
                <prop key="com.exception.MyIllegalArgumentException">test/exception/error-myIllegalArgument</prop>&lt;!&ndash;控制台抛出异常 页面显示:/edward-skillful-web/WEB-INF/views/error-myIllegalArgument.jsp&ndash;&gt;
                <prop key="com.exception.MyBusinessException">test/exception/error-myBusinessException</prop>&lt;!&ndash;控制台抛出异常 页面显示:/edward-skillful-web/WEB-INF/views/error-myBusinessException.jsp&ndash;&gt;
                &lt;!&ndash; 这里还可以继续扩展对不同异常类型的处理 &ndash;&gt;
            </props>
        </property>
    </bean>-->
    <!--第二种处理方法:自定义异常处理器-->
    <bean id="exceptionHandler" class="com.exception.MyExceptionHandler"/>



</beans>
